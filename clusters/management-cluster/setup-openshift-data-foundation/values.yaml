---
###########################
# Enable and configura ODF
###########################
openshift-data-foundation:
  storagecluster:
    enabled: true
    syncwave: 3

    # There are two options:
    # Either install the multigateway only. This is useful if you just need S3 for Quay registry for example.
    multigateway_only:
      enabled: true

      # Name of the stroageclass
      # The class must exist upfront and is currently not created by this chart.
      storageclass: gp3-csi

    # Second option is a full deployment, which will provide Block, File and Object Storage
    full_deployment:
      enabled: false

      # Enable NFS or not
      nfs: enabled

      # The label the nodes should have to allow hosting of ODF services
      # Default: cluster.ocs.openshift.io/openshift-storage
      # default_node_label: cluster.ocs.openshift.io/openshift-storage

      # Define the DeviceSets
      storageDeviceSets:
          # Name of the DeviceSet
        - name: ocs-deviceset
          # Resources for the DeviceSets Pods.
          # Limits and Requests can be defined
          # Default:
          #   Limit: cpu: 1, memory: 5Gi
          #   Requests: cpu: 1, memory: 5Gi
          resources:
            requests:
              cpu: '1'
              memory: 5Gi

          # Definitions of the PVC Template
          dataPVCTemplate:
            spec:
              # Default AccessModes
              # Default: ReadWriteOnce
              # accessModes:
              #   - ReadWriteOnce

              # Size of the Storage. Might be 512Gi, 2Ti, 4Ti
              # Default: 512Gi
              resources:
                requests:
                  storage: 512Gi

              # Name of the stroageclass
              # The class must exist upfront and is currently not created by this chart.
              storageClassName: gp3-csi

        # Replicas: Default 3
        # replica: 3

      # Resource settings for the different components.
      # ONLY set this if you know what you are doing.
      # For every component Limits and Requests can be set.

      # For testing request settings might be reduced.
      # compontent_resources:
        # MDS Defaults
        #   Limits: cpu 3, memory: 8Gi
        #   Requests: cpu: 1, memory: 8Gi
        # mds:
        #   requests:
        #     cpu: '1'
        #     memory: 8Gi

        # RGW Defaults
        #   Limits: cpu 2, memory: 4Gi
        #   Requests: cpu: 1, memory: 4Gi
        # rgw: ...
        # rgw:
        #   requests:
        #     cpu: '1'
        #     memory: 4Gi

        # MON Defaults
        #   Limits: cpu 2, memory: 4Gi
        #   Requests: cpu: 1, memory: 4Gi
        # mon: ...

        # MGR Defaults
        #   Limits: cpu 2, memory: 4Gi
        #   Requests: cpu: 1, memory: 4Gi
        # mgr: ...

        # NOOBAA-CORE Defaults
        #   Limits: cpu 2, memory: 4Gi
        #   Requests: cpu: 1, memory: 4Gi
        # moobaa-core: ...

       # NOOBAA-DB Defaults
        #   Limits: cpu 2, memory: 4Gi
        #   Requests: cpu: 1, memory: 4Gi
        # moobaa-DB: ...

# Install Operator Compliance Operator
# Deploys Operator --> Subscription and Operatorgroup
# Syncwave: 0
helper-operator:

  console_plugins:
    - odf-console

  operators:
    odf-operator:
      enabled: true
      syncwave: '0'
      namespace:
        name: openshift-storage
        create: true
      subscription:
        channel: stable-4.13
        approval: Automatic
        operatorName: odf-operator
        source: redhat-operators
        sourceNamespace: openshift-marketplace
      operatorgroup:
        create: true

helper-status-checker:
  enabled: true

  # use the value of the currentCSV (packagemanifest) but WITHOUT the version !!
  operatorName: odf-operator

  # where operator is installed
  namespace:
    name: openshift-storage

  serviceAccount:
    create: true
    name: "status-checker-odf"

