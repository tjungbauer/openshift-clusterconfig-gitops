---
namespace: &namespace openshift-netobserv-operator
bucketname: &bucketname netobserv-bucket
lokisecret: &loki-secret-name netobserv-loki-s3
storageclassname: &storageclassname netobserv-bucket-storage-class
lokistack_name: &lokistackname netobserv-loki


# Network Observability settings.
netobserv:
  # -- Enable Network Observability configuration?
  # This will also create the reader/writer rolebanding for multi-tenancy
  # @default -- false
  enabled: true

  # -- Namespace where Network Observability FlowCollector shall be installed.
  # @default -- 'netobserv'
  namespace: netobserv

  # -- Additional labels to add to the Keycloak instance as key: value pairs.
  # @section -- namespace
  # @default -- {}
  additionalAnnotations: {}
  #  additionalAnnotation1: "My Annotation"
  #  additionalAnnotation2: "My Annotation 2"

  # -- Additional labels to add to the Keycloak instance as key: value pairs.
  # @section -- namespace
  # @default -- {}
  additionalLabels: {}
  #  additionalLabel1: "My Label"
  #  additionalLabel2: "My Label 2"

  # -- Syncwave for the FlowCollector resource.
  # @default -- 10
  syncwave: 10

  # -- Ddefines the desired type of deployment for flow processing.
  # Possible values: <br />
  # <ul>
  # <li>Direct</li>
  # <li>Kafka</li>
  # </ul>
  # @default -- Direct
  deploymentModel: Direct

  # -- Loki client settings
  loki:
    # -- Enable storing flows in Loki. Loki and/or Prometheus can be used. However,
    # mot everything is transposable from Loki to Prometheus. Therefor some features of the plugin
    # are disabled as well, if Loki is disabled.
    # If Prometheus and Loki are enabled, then Prometheus will take precedence and Loki is used as a fallback.
    # @default -- true
    enabled: true

    # -- Mode must be set according to the deployment mode of Loki.
    # Possible values: <br />
    # <ul>
    # <li>LokiStack: when Loki is managed using the Loki Operator</li>
    # <li>Microservices: when Loki is installed as a microservice, but without the Loki Operator</li>
    # <li>Monolithic: when Loki is installed as a monolithic workload</li>
    # <li>Manual: if none of the options above match</li>
    # </ul>
    # @default -- Monolithic
    mode: LokiStack

    # -- Configuration for LOKI STACK MODE
    lokiStack:
      # -- Name of an existing LokiStack resource to use.
      # @default -- loki
      name: loki






########################################
# SUBCHART: helper-lokistack
# Renders a LokiStack object.
########################################
# Subchart with values to render the LokiStack object
helper-lokistack:
  # -- Enable or disable LokiStack configuration
  # @default -- false
  enabled: true

  # -- Name of the LokiStack object
  name: *lokistackname

  # -- Namespace of the LokiStack object
  namespace: netobserv

  # -- Syncwave for the LokiStack object.
  # @default -- 3
  syncwave: 3

  # storage settings
  storage:

    # -- Size defines one of the supported Loki deployment scale out sizes.
    # Can be either:
    #   - 1x.extra-small (Default)
    #   - 1x.small
    #   - 1x.medium
    # @default -- 1x.extra-small
    size: 1x.pico

    # Secret for object storage authentication. Name of a secret in the same namespace as the LokiStack custom resource.
    secret:

      # -- Name of a secret in the namespace configured for object storage secrets.
      name: *loki-secret-name

      # Type of object storage that should be used
      # Can bei either:
      #  - swift
      #  - azure
      #  - s3 (default)
      #  - alibabacloud
      #  - gcs
      # -- Type of object storage that should be used
      # @default -- s3
      # type: s3

    # Schemas for reading and writing logs.
    # schemas:
      # -- Version for writing and reading logs.
      # Can be v11 or v12
      # @default -- v12
      #  - version: v12

      # -- EffectiveDate is the date in UTC that the schema will be applied on. To ensure readibility of logs, this date should be before the current date in UTC.
      # @default -- 2022-06-01
      #    effectiveDate: "2022-06-01"

  # -- Storage class name defines the storage class for ingester/querier PVCs.
  # @default -- gp3-csi
  storageclassname: gp3-csi

  # -- Mode defines the mode in which lokistack-gateway component will be configured.
  # Can be either: static (default), dynamic, openshift-logging, openshift-network
  # @default -- static
  mode: openshift-network

  # -- Control pod placement for LokiStack components. You can define a list of tolerations for the following components:
  # compactor, distributer, gateway, indexGateway, ingester, querier, queryFrontend, ruler
  podPlacements: {}
  #  # Pod placement of compactor
  #  compactor:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of distributor
  #  distributor:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of gateway
  #  gateway:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of indexGateway
  #  indexGateway:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of ingester
  #  ingester:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of querier
  #  querier:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of queryFrontend
  #  queryFrontend:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of ruler
  #  ruler:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved

# A helper chart that simply creates another backingstore for quay.
# This is a chart in a very early state, and not everything can be customized for now.
# It will create the objects:
#  - BackingStore
#  - BackingClass
#  - StorageClass

# NOTE: Currently only PV type is supported
helper-objectstore:
  enabled: true
  # syncwave: 1

  # Name of the BackingStore
  backingstore_name: netobserv-backingstore
  # Size of the BackingStore
  backingstore_size: 100Gi
  # numOfVolumes: 1
  # type: py-pool

  # The StorageClass the BackingStore is based on
  baseStorageClass: gp3-csi

  # Name of the StorageClass that shall be enabled.
  storageclass_name: *storageclassname

  # Bucket that shall be created
  bucket:
    enabled: true
    name: *bucketname
    namespace: netobserv

    # is_secure: true
    # port: 443

    # Name of the storageclass
    # Default: openshift-storage.noobaa.io
    # a separate StorageClass with BackingStore and BackingClass can be created.
    storageclass: *storageclassname

    # Syncwave for bucketclaim creation. This should be done very early, but it depends on ODF.
    # Default: 2
    syncwave: 2

# SubChart to create the loki secret if required.
# The Secret must contain all required bucket information, while ODF creates a secret and a configmap for example.
# A Kubernetes Job is created, that reads the data from the Secret and ConfigMap and creates a new secret for loki.
helper-loki-bucket-secret:
  # Enable Job creation
  enabled: true

  # Syncwave ... best to do after bucket creation
  syncwave: 2

  # Namespace for logging
  namespace: netobserv

  # Secretname that shall be created
  secretname: *loki-secret-name

  # Name of the bucket
  bucket:
    name: *bucketname

# The operators are installed in a separate way in this case.
# sub subchart
helper-operator:
  console_plugins:
    enabled: true
    plugins:
      - netobserv-plugin

    job_namespace: kube-system

  operators:
    netobserv-operator:
      enabled: true
      syncwave: '0'
      namespace:
        name: *namespace
        create: true
      subscription:
        channel: stable
        source: redhat-operators
        approval: Automatic
        operatorName: netobserv-operator
        sourceNamespace: openshift-marketplace
      operatorgroup:
        create: true
        notownnamespace: true


helper-status-checker:
  enabled: true
  approver: false

  checks:
    - operatorName: netobserv-operator
      namespace:
        name: *namespace
      serviceAccount:
        name: "sa-file-netobserv-checker"
