---
namespace-operator: &namespace-operator openshift-netobserv-operator
namespace: &namespace netobserv
bucketname: &bucketname netobserv-bucket
lokisecret: &loki-secret-name netobserv-loki-s3
storageclassname: &storageclassname netobserv-bucket-storage-class
lokistack_name: &lokistackname netobserv-loki

network-observability:
  # Network Observability settings.
  netobserv:
    # -- Enable Network Observability configuration?
    # This will also create the reader/writer rolebanding for multi-tenancy
    # @default -- false
    enabled: true

    # -- Namespace where Network Observability FlowCollector shall be installed.
    # @default -- 'netobserv'
    namespace:
      name: *namespace
      create: true

    # -- Additional labels to add to the Keycloak instance as key: value pairs.
    # @section -- namespace
    # @default -- {}
    additionalAnnotations: {}
    #  additionalAnnotation1: "My Annotation"
    #  additionalAnnotation2: "My Annotation 2"

    # -- Additional labels to add to the Keycloak instance as key: value pairs.
    # @section -- namespace
    # @default -- {}
    additionalLabels: {}
    #  additionalLabel1: "My Label"
    #  additionalLabel2: "My Label 2"

    # -- Syncwave for the FlowCollector resource.
    # @default -- 10
    syncwave: 10

    # -- Ddefines the desired type of deployment for flow processing.
    # Possible values: <br />
    # <ul>
    # <li>Direct</li>
    # <li>Kafka</li>
    # </ul>
    # @default -- Direct
    deploymentModel: Direct

    # -- Loki client settings
    loki:
      # -- Enable storing flows in Loki. Loki and/or Prometheus can be used. However,
      # mot everything is transposable from Loki to Prometheus. Therefor some features of the plugin
      # are disabled as well, if Loki is disabled.
      # If Prometheus and Loki are enabled, then Prometheus will take precedence and Loki is used as a fallback.
      # @default -- true
      enable: true

      # -- Mode must be set according to the deployment mode of Loki.
      # Possible values: <br />
      # <ul>
      # <li>LokiStack: when Loki is managed using the Loki Operator</li>
      # <li>Microservices: when Loki is installed as a microservice, but without the Loki Operator</li>
      # <li>Monolithic: when Loki is installed as a monolithic workload</li>
      # <li>Manual: if none of the options above match</li>
      # </ul>
      # @default -- Monolithic
      mode: LokiStack

      # -- Configuration for LOKI STACK MODE
      lokiStack:
        # -- Name of an existing LokiStack resource to use.
        # @default -- loki
        name: *lokistackname

    # -- Agent configuration for flows extraction
    agent:

      # -- Type of the agent.
      # @default -- eBPF
      type: eBPF

      # -- Settings related to the eBPF-based flow reporter.
      ebpf:
        # -- Enable privileged mode for the eBPF agent.
        # @default -- false
        privileged: true

        # -- Features to enable for the eBPF agent.<br />
        # Possible values: <br />
        # <ul>
        # <li>PacketDrop: Enable the packets drop flows logging feature. This feature requires mounting the kernel debug filesystem, so the eBPF agent pods must run as privileged. If the spec.agent.ebpf.privileged parameter is not set, an error is reported.</li>
        # <li>DNSTracking: Enable the DNS tracking feature.</li>
        # <li>FlowRTT: Enable flow latency (sRTT) extraction in the eBPF agent from TCP traffic.</li>
        # <li>NetworkEvents: Enable the network events monitoring feature, such as correlating flows and network policies. This feature requires mounting the kernel debug filesystem, so the eBPF agent pods must run as privileged. It requires using the OVN-Kubernetes network plugin with the Observability feature. IMPORTANT: This feature is available as a Technology Preview.</li>
        # <li>PacketTranslation: Enable enriching flows with packet translation information, such as Service NAT.</li>
        # <li>EbpfManager: [Unsupported (*)]. Use eBPF Manager to manage network observability eBPF programs. Pre-requisite: the eBPF Manager operator (or upstream bpfman operator) must be installed.</li>
        # <li>UDNMapping: [Unsupported (*)]. Enable interfaces mapping to User Defined Networks (UDN). This feature requires mounting the kernel debug filesystem, so the eBPF agent pods must run as privileged. It requires using the OVN-Kubernetes network plugin with the Observability feature.</li>
        # </ul>
        # @default -- []
        features:
          - PacketDrop
          - DNSTracking
          - NetworkEvents

        # -- Interfaces to exclude from the eBPF agent.
        # @default -- ['lo']
        excludeInterfaces:
          - lo

    # -- Console Plugin configuration related to the OpenShift Console integration.
    consolePlugin:
      # -- Enable the console plugin.
      # @default -- true
      enable: true

      # -- Quick filters configures quick filters presents for the console plugin.
      # You can define any filter you like, but the following filters are available by default:
      # <ul>
      # <li>Applications: filter flows by the application layer</li>
      # <li>Infrastructure: filter flows by the infrastructure layer</li>
      # <li>Pods network: filter flows by the source and destination kind of Pod</li>
      # <li>Services network: filter flows by the destination kind of Service</li>
      # </ul>
      # It is not recommended to remove the default filters.
      # @default -- []
      quickFilters:
        - default: true
          filter:
            flow_layer: '"app"'
          name: Applications
        - filter:
            flow_layer: '"infra"'
          name: Infrastructure
        - default: true
          filter:
            dst_kind: '"Pod"'
            src_kind: '"Pod"'
          name: Pods network
        - filter:
            dst_kind: '"Service"'
          name: Services network

      # -- Advanced Parameters for the Console Plugin
      advanced:
        # -- Set placement and tolerations for the consolePlugin
        scheduling:
          # -- Set nodeSelector to place the consolePlugin on specific nodes
          # @default -- {}
          # nodeSelector:
          #   key: node-role.kubernetes.io/infra
          #   value: ''

          # -- Set tolerations for the consolePlugin
          # @default -- []
          # tolerations:
          #   - effect: NoSchedule
          #     key: node-role.kubernetes.io/infra
          #     operator: Equal
          #     value: reserved
          #   - effect: NoExecute
          #     key: node-role.kubernetes.io/infra
          #     operator: Equal
          #     value: reserved

    # Processor Configuration of the component that receives the flows from the agent, enriches them, and sends them to the storage.
    processor:

      # -- Log types defines the desired record types to generate. Possible values are:<br>
      # <ul>
      # <li>Flows to export regular network flows. This is the default.</li>
      # <li>Conversations to generate events for started conversations, ended conversations as well as periodic "tick" updates.</li>
      # <li>EndedConversations to generate only ended conversations events.</li>
      # <li>All to generate both network flows and all conversations events. It is not recommended due to the impact on resources footprint.</li>
      # </ul>
      # @default -- Flows
      logTypes: Flows

    # -- additional optional exporters for custom consumption or storage.
    exporters: []

########################################
# SUBCHART: helper-lokistack
# Renders a LokiStack object.
########################################
# Subchart with values to render the LokiStack object
helper-lokistack:
  # -- Enable or disable LokiStack configuration
  # @default -- false
  enabled: true

  # -- Name of the LokiStack object
  name: *lokistackname

  # -- Namespace of the LokiStack object
  namespace: *namespace

  # -- Syncwave for the LokiStack object.
  # @default -- 3
  syncwave: 3

  # storage settings
  storage:

    # -- Size defines one of the supported Loki deployment scale out sizes.
    # Can be either:
    #   - 1x.extra-small (Default)
    #   - 1x.small
    #   - 1x.medium
    # @default -- 1x.extra-small
    size: 1x.pico

    # Secret for object storage authentication. Name of a secret in the same namespace as the LokiStack custom resource.
    secret:

      # -- Name of a secret in the namespace configured for object storage secrets.
      name: *loki-secret-name

      # Type of object storage that should be used
      # Can bei either:
      #  - swift
      #  - azure
      #  - s3 (default)
      #  - alibabacloud
      #  - gcs
      # -- Type of object storage that should be used
      # @default -- s3
      # type: s3

    # Schemas for reading and writing logs.
    # schemas:
      # -- Version for writing and reading logs.
      # Can be v11, v12 or v13
      # @default -- v13
      #  - version: v13

      # -- EffectiveDate is the date in UTC that the schema will be applied on. To ensure readibility of logs, this date should be before the current date in UTC.
      # @default -- 2022-06-01
      #    effectiveDate: "2022-06-01"

  # -- Storage class name defines the storage class for ingester/querier PVCs.
  # @default -- gp3-csi
  storageclassname: gp3-csi

  # -- Mode defines the mode in which lokistack-gateway component will be configured.
  # Can be either: static (default), dynamic, openshift-logging, openshift-network
  # @default -- static
  mode: openshift-network

  # -- Control pod placement for LokiStack components. You can define a list of tolerations for the following components:
  # compactor, distributer, gateway, indexGateway, ingester, querier, queryFrontend, ruler
  podPlacements: {}
  #  # Pod placement of compactor
  #  compactor:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of distributor
  #  distributor:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of gateway
  #  gateway:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of indexGateway
  #  indexGateway:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of ingester
  #  ingester:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of querier
  #  querier:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of queryFrontend
  #  queryFrontend:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #  # Pod placement of ruler
  #  ruler:
  #    tolerations:
  #      - effect: NoSchedule
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved
  #      - effect: NoExecute
  #        key: node-role.kubernetes.io/infra
  #        operator: Equal
  #        value: reserved

# A helper chart that simply creates another backingstore for quay.
# This is a chart in a very early state, and not everything can be customized for now.
# It will create the objects:
#  - BackingStore
#  - BackingClass
#  - StorageClass

# NOTE: Currently only PV type is supported
helper-objectstore:
  enabled: true
  # syncwave: 1

  # Name of the BackingStore
  backingstore_name: netobserv-backingstore
  # Size of the BackingStore
  backingstore_size: 100Gi
  # numOfVolumes: 1
  # type: py-pool

  # The StorageClass the BackingStore is based on
  baseStorageClass: gp3-csi

  # Name of the StorageClass that shall be enabled.
  storageclass_name: *storageclassname

  # Bucket that shall be created
  bucket:
    enabled: true
    name: *bucketname
    namespace: *namespace

    # is_secure: true
    # port: 443

    # Name of the storageclass
    # Default: openshift-storage.noobaa.io
    # a separate StorageClass with BackingStore and BackingClass can be created.
    storageclass: *storageclassname

    # Syncwave for bucketclaim creation. This should be done very early, but it depends on ODF.
    # Default: 2
    syncwave: 2

# SubChart to create the loki secret if required.
# The Secret must contain all required bucket information, while ODF creates a secret and a configmap for example.
# A Kubernetes Job is created, that reads the data from the Secret and ConfigMap and creates a new secret for loki.
helper-loki-bucket-secret:
  # Enable Job creation
  enabled: true

  # Syncwave ... best to do after bucket creation
  syncwave: 2

  # Namespace for logging
  namespace: *namespace

  # Secretname that shall be created
  secretname: *loki-secret-name

  # Name of the bucket
  bucket:
    name: *bucketname

# The operators are installed in a separate way in this case.
# sub subchart
helper-operator:
  console_plugins:
    enabled: true
    plugins:
      - netobserv-plugin

    job_namespace: kube-system

  operators:
    netobserv-operator:
      enabled: true
      syncwave: '0'
      namespace:
        name: *namespace-operator
        create: true
      subscription:
        channel: stable
        source: redhat-operators
        approval: Automatic
        operatorName: netobserv-operator
        sourceNamespace: openshift-marketplace
      operatorgroup:
        create: true
        notownnamespace: true


helper-status-checker:
  enabled: true
  approver: false

  checks:
    - operatorName: netobserv-operator
      namespace:
        name: *namespace-operator
      serviceAccount:
        name: "sa-file-netobserv-checker"
