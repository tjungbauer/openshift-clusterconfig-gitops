---
logging-namespace: &log-namespace openshift-logging
bucketname: &bucketname logging-bucket
lokisecret: &loki-secret-name logging-loki-s3
storageclassname: &storageclassname logging-bucket-storage-class

# A helper chart that simply creates another backingstore for quay.
# This is a chart in a very early state, and not everything can be customized for now.
# It will create the objects:
#  - BackingStore
#  - BackingClass
#  - StorageClass

# NOTE: Currently only PV type is supported
helper-objectstore:
  enabled: true
  # syncwave: 1

  # Name of the BackingStore
  backingstore_name: logging-backingstore
  # Size of the BackingStore
  backingstore_size: 700Gi
  limits_cpu: 500m
  limits_memory: 2Gi
  # numOfVolumes: 1
  # type: pv-pool

  # The StorageClass the BackingStore is based on
  baseStorageClass: gp3-csi

  # Name of the StorageClass that shall be enabled.
  storageclass_name: *storageclassname

  # Bucket that shall be created
  bucket:
    enabled: true
    name: *bucketname
    namespace: *log-namespace

    # Syncwave for bucketclaim creation. This should be done very early, but it depends on ODF.
    # Default: 1
    syncwave: 1

    # is_secure: true
    # port: 443

    # Name of the storageclass
    # Default: openshift-storage.noobaa.io
    storageclass: *storageclassname

# The operators are installed in a separate way in this case.
# sub subchart
helper-operator:

  console_plugins:
    enabled: true
    plugins:
      - logging-view-plugin

  operators:
    cluster-logging-operator:
      enabled: true
      syncwave: '0'
      namespace:
        name: *log-namespace
        create: true
      subscription:
        channel: stable-5.8
        source: redhat-operators
        approval: Automatic
        operatorName: cluster-logging
        sourceNamespace: openshift-marketplace
      operatorgroup:
        create: true
        notownnamespace: false

# SubChart to create the loki secret if required.
# The Secret must contain all required bucket information, while ODF creates a secret and a configmap for example.
# A Kubernetes Job is created, that reads the data from the Secret and ConfigMap and creates a new secret for loki.
helper-loki-bucket-secret:
  # Enable Job creation
  enabled: true

  # Syncwave ... best to do after bucket creation
  syncwave: 2

  # Namespace for logging
  namespace: *log-namespace

  # Secretname that shall be created
  secretname: *loki-secret-name

  # Name of the bucket
  bucket:
    name: *bucketname

# Local values.
logging:
  enabled: true
  namespace:
    name: *log-namespace

  lokistack:
    # name of the Lokistack object and its syncwave (should be after bucket and secret generation)
    name: logging-loki
    syncwave: 3

    # storage settings
    storage:

      # Size defines one of the support Loki deployment scale out sizes.
      # Can be either:
      #   - 1x.extra-small (Default)
      #   - 1x.small
      #   - 1x.medium
      # size: 1x.extra-small

      # Secret for object storage authentication. Name of a secret in the same namespace as the LokiStack custom resource.
      secret:

        # Name of a secret in the namespace configured for object storage secrets.
        name: *loki-secret-name

        # Type of object storage that should be used
        # Can bei either:
        #  - swift
        #  - azure
        #  - s3 (default)
        #  - alibabacloud
        #  - gcs
        # type: s3

      # Schemas for reading and writing logs.
      # schemas:
      #  # Version for writing and reading logs.
      #  # Can be v11 or v12
      #  #
      #  # Default: v12
      #  - version: v12

      #    # EffectiveDate is the date in UTC that the schema will be applied on. To ensure readibility of logs, this date should be before the current date in UTC.
      #    # Default: 2022-06-01
      #    effectiveDate: "2022-06-01"

    # Storage class name defines the storage class for ingester/querier PVCs.
    storageclassname: gp3-csi

    # Mode defines the mode in which lokistack-gateway component will be configured.
    # Can be either:
    #   - static (default)
    #   - dynamic
    #   - openshift-logging
    #   - openshift-network
    mode: openshift-logging

 # subchart
openshift-logging:

  loggingConfig:
    enabled: true
    syncwave: '4'

    # Indicator if the resource is 'Managed' or 'Unmanaged' by the operator
    # managementState: Managed

    # Specification of the Log Storage component for the cluster
    logStore:
      # The Type of Log Storage to configure. The operator currently supports either using ElasticSearch managed by elasticsearch-operator or Loki managed by loki-operator (LokiStack) as a default log store.
      type: lokistack

      # Name of the LokiStack resource.
      lokistack: logging-loki

      retentionPolicy:
        application:
          maxAge: 4d
        audit:
          maxAge: 4d
        infra:
          maxAge: 4d

      visualization:
        # The type of Visualization to configure
        # Could be either Kibana or ocp-console
        type: ocp-console

      collection:
        # The type of Log Collection to configure
        # Vector in case of Loki...
        type: vector

        # The resource requirements for the collector
        # resources:
        #   limits:
        #     cpu: '500m'
        #     memory: '1Gi'
        #     ephemeral-storage: '50Mi'
        #   requests:
        #     cpu: '500m'
        #     memory: '1Gi'
        #     ephemeral-storage: '500Mi'

        # Define the tolerations the Pods will accept
        # tolerations:
        #  - effect: NoSchedule
        #    key: infra
        #    operator: Equal
        #    value: 'reserved'
