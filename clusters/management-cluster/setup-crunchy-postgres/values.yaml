---
namespace: &namespace "crunchy-postgres-operator"
s3endpoint: &s3endpoint "s3.openshift-storage.svc:443"
baseStorageClass: &baseStorageClass "gp3-csi"
# Idea for the name would be <something>-<NAMESPACE>
bucketname: &bucketname pg-crunchy-postgres-operator-s3
# Idea for the name would be <something>-<NAMESPACE>
storageclassname: &storageclassname pg-crunchy-postgres-operator-s3

######################################
# SUBCHART: helper-operator
# Operators that shall be installed.
######################################
helper-operator:

  operators:
    crunchy-postgres-operator:
      enabled: true
      namespace:
        name: *namespace
        create: true
      subscription:
        channel: v5
        approval: Manual
        operatorName: crunchy-postgres-operator
        source: certified-operators
        sourceNamespace: openshift-marketplace
      operatorgroup:
        create: true
        notownnamespace: false

########################################
# SUBCHART: helper-status-checker
# Verify the status of a given operator.
########################################
helper-status-checker:
  enabled: true
  approver: true

  # List of checks that shall be performed.
  checks:
    - operatorName: postgresoperator
      subscriptionName: crunchy-postgres-operator
      sleeptimer: 60
      maxretries: 100
      syncwave: '0'
      namespace:
        name: *namespace

      serviceAccount:
        name: "status-checker-crunchy-postgres-operator"

########################################
# SUBCHART: helper-objectstore

# A helper chart that simply creates another backingstore.
# Not everything can be customized for now.
# It will create the objects:
#  - BackingStore
#  - BackingClass
#  - StorageClass

# NOTE: Currently only PV type is supported
########################################
helper-objectstore:

  # -- Enable objectstore configuration
  # @default -- false
  enabled: true

  # -- Syncwave for Argo CD
  # @default - 1
  syncwave: 1

  # -- Name of the BackingStore
  backingstore_name: pg-backingstore

  # -- Size of the BackingStore that each volume shall have.
  backingstore_size: 700Gi

  # -- CPU Limit for the Noobaa Pod
  # @default -- 500m
  limits_cpu: 500m

  # -- Memory Limit for the Noobaa Pod.
  # @default -- 2Gi
  limits_memory: 2Gi

  pvPool:
    # -- Number of volumes that shall be used
    # @default -- 1
    numOfVolumes: 1

    # Type of BackingStore. Currently pv-pool is the only one supported by this Helm Chart.
    # @default -- pv-pool
    type: pv-pool

  # -- The StorageClass the BackingStore is based on
  baseStorageClass: *baseStorageClass

  # -- Name of the StorageClass that shall be created for the bucket.
  storageclass_name: *storageclassname

  # Bucket that shall be created
  bucket:
    # -- Shall a new bucket be enabled?
    # @default -- false
    enabled: true

    # -- Name of the bucket that shall be created
    name: *bucketname

    # -- Target Namespace for that bucket.
    namespace: *namespace

    # -- Syncwave for bucketclaim creation. This should be done very early, but it depends on ODF.
    # @default -- 2
    syncwave: 2

    # -- Name of the storageclass for our bucket
    # @default -- openshift-storage.noobaa.io
    storageclass: *storageclassname

###################################################
# Postgres Cluster Settings
# This will configure the PostgresCluster resource
###################################################
postgresql:
  # -- Enable PostgresCluster Configuration
  # @section -- PostgresCluster
  # @default -- false
  enabled: true

  # -- Argo CD Syncwave for PostgresCluster resource<br />
  # <b>ATTN</b>: Must be set to "0" as the Atlassian charts currently to not support annotations.
  # @section -- PostgresCluster
  # @default -- 0
  syncwave: "10"

  # -- Name of the PostgresCluster instance
  # @section -- PostgresCluster
  name: test-db

  # -- PostgresCluster version
  # @section -- PostgresCluster
  version: 16

  # -- Initialize Database
  # This will pick up the data from the "key" from the configmap "name"
  # @section -- PostgresCluster
  databaseInitSQL: {}

  # -- List of initial users
  # @section -- PostgresCluster
  users:
      # -- Create "minio" User
      # @section -- PostgresCluster
    - name: myuser
      # -- Be sure the password type is set to "AlphaNumeric"
      # @section -- PostgresCluster
      password:
        type: AlphaNumeric
      # -- Options for that user
      # @section -- PostgresCluster
      options: SUPERUSER

      # -- Databases the user shall have access to.
      # @section -- PostgresCluster
      databases:
        - mydb1
        - mydb2
    - name: postgres

  # Base configuration of the Postgres instances
  # There are no default values, so all of these must be set
  instances:

      # -- Instance Name
      # @section -- PostgresCluster
    - name: instance1

      # -- Replicas for this Postgres instance
      # @section -- PostgresCluster
      replicas: 2

      # Information about the PVC
      dataVolumeClaimSpec:
        # -- Create a RWX storage with this size.
        # @section -- PostgresCluster
        storageSize: 30Gi

        # -- StorageClass for the PVC. Must support RWX
        # @section -- PostgresCluster
        storageClass: *baseStorageClass

      # -- Resource specification for this Postgres instance
      # @section -- PostgresCluster
      resources:
        limits_cpu: 4
        requests_cpu: 4
        limits_memory: 8Gi
        requests_memory: 8Gi

  ###########################################################################################
  # POSTGRES BACKUP SETTINGS
  # S3 backup using repo2 is assumed
  # This here shall only help to set some parameters and does not provide full fledged logic
  ###########################################################################################
  backup:

    # -- Name of the Secret that contains the information about the S3 storage.<br />
    # @section -- PostgresCluster
    secretName: pgbackrest-config

    # Global Backup settings
    global:
      # -- Image for pgBackRest image
      # @section -- PostgresCluster
      image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest:ubi8-2.47-2

      # -- Path inside the object storage to store the backup
      # @section -- PostgresCluster
      repo2_path: /pgo/management-cluster/crunchy-postgres-operator/test-db/repo2

      # -- Retention period for full backups
      # @section -- PostgresCluster
      repo2_retention_full: '5'

      # -- Calculation of retetion period (could be time or amount)
      # @section -- PostgresCluster
      repo2_retention_full_type: time

      # -- S3 URI Style
      # @section -- PostgresCluster
      repo2_s3_uri_style: path

      # -- Path to the CA of Minio Storage
      # @section -- PostgresCluster
      # repo2_storage_ca_file: /etc/pgbackrest/conf.d/repo2-ca.crt

    # Repo definition
    repos:
      # -- Name of the S3 bucket
      # @section -- PostgresCluster
      bucket: *bucketname

      # -- Endpoint of S3 Storage
      # @section -- PostgresCluster
      endpoint: *s3endpoint

  ###########################################################################################
  # POSTGRES MONITRING SETTINGS
  # This will start the exporter container and enabled monitoring and alerting on DB issues
  ###########################################################################################
  monitoring:

    # -- Enable monitoring true/false
    # @section -- PostgresCluster
    # @default -- false
    enabled: true

    # -- URL to the image for the exporter container
    # @section -- PostgresCluster
    image: 'registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter:ubi8-5.5.0-0'
